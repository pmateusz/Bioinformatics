package com.github.pmateusz.bioinformatics.comparing;

import jdk.nashorn.internal.objects.Global;
import lombok.Data;
import org.junit.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.ObjectFactory;
import org.testng.annotations.Test;

import java.io.IOException;

public class ComparingTest {

    private static final int INDEL_PENALTY = 5;

    @DataProvider(name = "longestCommonSequenceBackTrackTest")
    public Object[][] dataProvider() {
        return new Object[][]{
                {"PLEASANTLY", "MEANLY", "PLEASANTLY", "-ME--AN-LY", 8},
                {"ILYPRQSMICMSFCFWDMWKKDVPVVLMMFLERRQMQSVFSWLVTVKTDCGKGIYNHRKYLGLPTMTAGDWHWIKKQNDPHEWFQGRLETAWLHSTFLYWKYFECDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIWMATDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKNYMMAPVVNDPMIEAFYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMNTDPHYCQTHVCWISAMFPIYSPFYTSGPKEFYMWLQARIDQNMHGHANHYVTSGNWDSVYTPEKRAGVFPVVVPVWYPPQMCNDYIKLTYECERFHVEGTFGCNRWDLGCRRYIIFQCPYCDTMKICYVDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEWCNQPVLAKFVRSKIVAICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPTSHYVFMRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHHRRAFRAELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA",
                        "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVPLNPQMQTVFQNRGLDRVTVKTDCHDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLYKKTEYCLVRHSNCCHCDWDQIIHTCAFIAFLDLYQRHWPMCDKLYCHFHHSWFCRNQEMSMDWNQWFPWDSVPRANCLEEGALIALYAGIWANSMKRDMKTDHACTVRLIYVCELHAWLKYCYTSINMLCGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQGICPVERKSHCEIYAKDLLSFESCCSQKQNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPPKEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSYKLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWACEAQTNVCERMLNNQHVAVKRNVTFWWQMVPNCLWSCHNKMTWPTRPEQHRLFFVKMRLKCMHEYLDVAPSDFCRNMQAYMHSMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGYIYDQSLQVVSCEGCSYYADCYVKCINVKEKCMFA",
                        "ILYPRQSMICMSFCF-WD--MWKKDVPVVLMMFLERRQMQSVF-S-WL--VTVKTDCGKGIYNHR-K--Y-LGLPTMTAGDWHWIKK---Q-NDPHEWFQGRLETAWLHSTFLYWKYFE-CDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIW-------MATDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVK-NYMMAPVVN--DPMIEAFYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMN-TDPH----Y--CQTHVCW-ISA-MFPIYSPFY--TSG-PKE--FYM-WLQARI-DQN---MHGHANHYV-TSGNWDSVYTPEKRA--G--V-F-PV--------VVPVWYPPQMCN--DYIKLTYEC----E-RFHVEGTFGCNRWD-L-GC-R-RYI--IFQCPYCDTMKI---C--YVDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEW-----CNQPVLAKFVRSKIVA---ICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPT---SHYV-F--MRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHH-RRAFR--A--ELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA",
                        "ILIPRQQMGCFPFPWHFDFCFWSAHHSLV-VP-L-NPQMQTVFQNRGLDRVTVKTDC----HDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLY-KKTEYC-LVR---HS-NCC-HCDWDQIIHTCAF-----IAFLDLYQRHWPMCDKLY---------CHFHHSWFCRNQEMSM-----D--W------------NQWF-----P--WDSV--PRANC-LEEGALIALYAGIWANSMKRDMKTDHACT--VRLIYVCELHAWLK-YCYTSINML-CGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQ------GICPVERKSHCEIYAKDLLSFESCCSQ-KQNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRP-PKEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSYKLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWA-C---EA---QTNVCERMLN-NQHVA-VKRNVTFWWQMVPNC----LWSCHNKMTWPTRPEQHRLFFVKMRLKCMH-----EYLD--VAP--SDFCRNMQAYM----H---SMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGY-I--------YDQSLQVVSCEGCSYYADCYVK-CINVKEKCMFA",
                        1555}
        };
    }

    @Test
    public void longestLocalAlignmentTest() throws IOException {
        String left = "MEANLY";
        String right = "PENALTY";
        ScoringMatrix scoringMatrix = ScoringMatrix.load("com/github/pmateusz/bioinformatics/comparing/pam250.txt");

        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.compareLocal(left, right, scoringMatrix, 5);
        Assert.assertEquals(15, result.getScore());
        Assert.assertEquals("EANL-Y", result.getLeft());
        Assert.assertEquals("ENALTY", result.getRight());
    }

    @Test
    public void submissionLongestLocalAlignmentTest() throws IOException {
        String left = "SKWGNICNSVGGEHRKMQTHHRTKELQDPPWSKNQVFEYDNRSGYSTKNIKGQMKDRVHGCPIRFRLVIDMKKRIIFCNEIKIDCFNISWEDCTFSIPEMPYMSENRLAWWIGCMWTYTAWICHCALQNYSFVEPAHFTMNVTLWPLDTFTIDRGSRNAFVIKDKFCFNWLKYHGCLNQYEHCRCHMNVDCIPHIRLTYSHLKLGRNSHCEECYEMNLFERYNIYWIVCIAMHKFEPVGFRNVRLIPEPWIDIRGAWYRDFQEHKKKAVLIDKKDLIQEWFSRKWYPGDTSSPAQFLRFPVATNEWMYPSSPIGSYWIALVVRPHTYDGSMKGHEHIPSVLSRRMLSAWHNAYIVKCGGAYANEKAFCETAPELQEKNNWSPWRDSFYVADKINFADGFNGVYIDDNSTCTWSSFGFPSERVDRGNHQLTECRQLMDLTSLKLSHYSSTKFWLCMSSEMFVKDTIHDGRRNIKVSKGAEVVKLMWACQDSPRRSWHDFYYDNAVSCHWSRSFGMPYQVIGKYLASIKAFKITPMRKMHEWDNFRECFMDHCNYTCMCWNRRSNSIKQMQRVNTGVFWFITSKNQTGCQPAGSNTQYWMLHKFIHSMVTHWICGSQSYDISKGWVEFDEHQCEYRRWWIKGRRSPLQFRNWKPRCSSTYHLAWHCSTAYELVAWWRPAEHVGFGYGASSYVQGEVWMFGNGECKWKFSMGCDTQLDTHCDIFNQKIPNVNWMAHYVPERGGVQEVFYKMHQYNKDRLRMMRIGPVFSCSTEQDSPIRVLCSKITKPCHVKIIGANLTKRNTYNTLLMKQGLRPGNMAYNCCIRVCGCFSCDRYKELIARSHAWSMFNHYCDYKAGARYWDSNLNKTVNSHCYTESMWVQFHKHEAQIVPYTGWDNPYCYFC";
        String right = "ANTTDFYYICTPYFASAERIQEYFGKMATGTIPKIMEMQYKMMYMQCCEFNMCRANKKWRMPGHVIGVSLGLVPYQMTDHAEDCKDGEAYIEMRLTDSANLDWKRCTDMHDGLVDQQILNPWNYFIKIPFETGQVTKNLVWNAPAYFPVGFFSTVGVNHNNHLVLPYIWHFDQYINTTIANGYCAMIKFENSFPCINYPNDVEFTPISQGTFIIDVCYWPGRDCKNFWRCKIVSHARNDEERYNIYWIVCIAMHKFEPVANVDCETAHCLIPEPWIDIRGWYQEHVLIDKKDLIQPWYPGDTDSPAQFLRFPVATNIGPGFCYHSYWIALVHTYDGSAKSWVHSPQMLRNFHQVRNWHNAYAYANFPNKRSVKVFCETAPELQEKNNPTAWIKSDKINFADGFNGSYIDDNSTCTWSWFGFPSQWWREDNKKHQNAYDNTTECRQLMDLTSLKLSHYSSTKFWLCMSSSMFVKDTIHDGRRNIKVSKGAEVVKLMRACGEIIRKQGRVSNRRRSAVFCHWSRSEGLPGDLQAMPFVGRQVFGQVIGKYLASIKAFPRKEMPITPMRAMHEWDNFRECWMDHRLRRNYTVMCWNRRSNYIKQEQRVNTVLTFWFITSCSGSVGKAHMGSQSYFWVECHFDSVRHAQRDDYRGDIRHVMHVKGSTSKAATFQLLYLHWLLNNCWAYCIGNFPFVHFRPIMGRQYKGVSTASAVYIMKNFNLQHPKQVFVIEWVWKNHSQAARCHDLVYGVMQNYDFKKWCYYNSCHRSYIAYQSRRFMAPCVREKHICTVACGYQMGEGKDRRSFGRWEATHYIGEHRWFRKNTAYTSNKNHCVCYGAQYYTLYCECRRHLEMDVMLGIEAEYLRAIGSYHENTQIAIERDIKWNRAWELEVWDFRSYWRWMSCDPPFWGERLCYHHRHSSRTQDQHGEPVAVVNTEDW";
        ScoringMatrix scoringMatrix = ScoringMatrix.load("com/github/pmateusz/bioinformatics/comparing/pam250.txt");

        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.compareLocal(left, right, scoringMatrix, INDEL_PENALTY);

        System.out.println(result.getScore());
        System.out.println(result.getLeft());
        System.out.println(result.getRight());
    }

    @DataProvider(name = "editDistanceDataProvider")
    public Object[][] editDistanceDataProvider() {
        return new Object[][]{
                {"PLEASANTLY", "MEANLY", 5},
                {"TGCATAT", "ATCCGAT", 4},
                {"GGACRNQMSEVNMWGCWWASVWVSWCEYIMPSGWRRMKDRHMWHWSVHQQSSPCAKSICFHETKNQWNQDACGPKVTQHECMRRRLVIAVKEEKSRETKMLDLRHRMSGRMNEHNVTLRKSPCVKRIMERTTYHRFMCLFEVVPAKRQAYNSCDTYTMMACVAFAFVNEADWWKCNCAFATVPYYFDDSCRMVCGARQCYRLWQWEVNTENYVSIEHAEENPFSKLKQQWCYIPMYANFAWSANHMFWAYIANELQLDWQHPNAHPIKWLQNFLMRPYHPNCGLQHKERITPLHKSFYGMFTQHHLFCKELDWRIMAHANRYYCIQHGWHTNNPMDPIDTRHCCMIQGIPKRDHHCAWSTCDVAPLQGNWMLMHHCHHWNRVESMIQNQHEVAAGIKYWRLNRNGKLPVHTADNYGVLFQRWWFLGWYNFMMWHYSLHFFAVNFYFPELNAGQMPRFQDDQNRDDVYDTCIWYFAWSNTEFMEVFGNMMMYSRPMTKMGFHGMMLPYIAINGLRSISHVNKGIGPISGENCNLSTGLHHYGQLRMVMCGYCTPYRTEVKNQREMISAVHCHQHIDWRWIWCSGHWFGSNKCDLRIEDLQNYEPAKNKSNWPYMKECRKTEPYQDNIETMFFHQHDLARDSGYIANGWHENCRQHQDFSNTFAGGHKGTPKGEHMRRSLYVWDTDCVEKCQWVPELFALCWWTPLPDGVPVMLGTYRQYMFGLVVLYWFEVKYSCHNSWDYYNFHEGTMKDSDPENWCFWGMQIIQFHDHGKPEFFQDPMKQIIKTECTAYNSFMMGHIGKTTIVYLVSYIGRLWMKSCCLTWPPYATAPIKWAEETLLDFGQGPHPKYACHFTHQNMIRLAKLPMYWLWKLMFHE",
                        "GMWGFVQVSTQSRFRHMWHWSVHQQSSECAKSICHHEWKNQWNQDACGPKVTQHECMANMPMHKCNNWFWRLVIAVKEEKVRETKMLDLIHRHWLVLNQGRMNEHNVTLRKSPCVKRIMHKWKSRTTFHRFMCLMASEVVPAKRGAQCWRQLGTYATYTVYTMMACVAFAFEYQQDNDNEADWWKCNCAFVPVYFDDSCRPVVGAFQCYRLGLPFGTGWNYAEENPFSKLKQQMHRKTMGECKNMMIWAYCANELQLPIKWGSMYHEHDFQLPPYHPNRFHKIRITILHKSFYGMFTQHHLFCKELDWRIMAWANRYYCIQHGWHTNNPDDPITRHKCMIQGGQNSRNADIRHMPVQCGNWGHAIGLEMPMPMHHCHHANRVESMIQTQHYWGPKLNRNADWWFLGWQNFEIFRMPILRWMGAYEWHYSLHFFAVNFYFPELNAGQMPRFQDDQNNNACYDVWAWSNTEFMEVNGIKKLRFGNMMMYSRPMTKMGFHGMMKSRSISHVNKGIGPISGENCSTGLHHYGQLTEVKNQREMISAVHCHQHIWCKCDLRIEPAKNKGYWPYQKEFCWRKQINSRKTEPYQVAPVINIETMFFDFWYIANGMHENCRRTGHKPNPDCVEKCQWVPELFALCWWRAMPDGVPVMLGTMFGLVVYWFEVKYSCHNSLYRRVTDYYNFHEGTMKDHEVPWNWDNEHCHDHGKAEFFFQMLKIPICDPMKAIIPSTEMVNTPWHPFSFMMGHDGKTTIVYSGSYIGRLWVPSRWKPYAPANWKMPIKWAEETLLMVPHPHFTHQQLWGTTLRLAKLPMYWLWKLMFHHLFGVK",
                        400}
        };
    }

    @Test(dataProvider = "editDistanceDataProvider")
    public void editDistanceTest(String left, String right, int expectedResult) {
        int result = GlobalAlignmentProblem.computeEditDistance(left, right);
        Assert.assertEquals(expectedResult, result);
    }

    @Test
    public void submissionEditDistanceTest() {
        String left = "RARYTGNLSKKQWKIAVHAWDSIAWLESTLTCCSLDAAWILCPGDSRGSGDFFQTESIPPRFMNYRNFVQMLTMTYWMFMMCVWWSTNGTEMMEIVNHKKNMMRNLLQVIFHPWMFNNWCHLVENWHIFNQGWPGRAMEHTWRMANTSYGIKTVRCEQPFSQCYANDHHQMDMYLCCQLPHSRQGMHGMILCCLGVPEYAFPCKVSMQQESVFFNNLIHIEMFDLSNNSHAKGDGVIILTIGVDLTPFWYNGDMHCYAPVYVHPAMSCIHQTYWYYENERQINNWRLIRNMMPTFSMGSEFQNGWDFNNSKQTPSAPEEDRHHLPEMEPLFVVQNDYHYYCLSKYDGEYHQDCGGLNFRITAWMFYLMHMENAWDELIEMNQTFDPWKTPLINWNMYQSFIMSYKRCVEHYKVMRPEVFDSFCWNSIMFDEFNWECRCMKTPNYIMKHPCDQACWRHCIFNIATIININCNQVEGWSDYCLAFYFPRGSTLRKTEVSCEKSKCNHAFETCCQGKLWKNGCAHRDRRANKTQMQKCRHVDMTEDAVPRRALVIEVVDTKYEFLPKMWKLFIRPMVYFLSVPVHLKQIMFIITPWFVETEFLWDRGNHQENGNMDCDVVNRRGFSADPMYQHKEDVIMFRRSITMWCMQKHSLCCFERPNAQPYKPREMDLHSIHTNHMTVTHQPQIACHCHKLKPPGKHQGYVNFHSFDECVPTQFRALYLEHFRRRKMKTQIHHQWDRCGQDMQATYRTIATMEQPFNPYKIMFGIWQITKIMLPKRQFHSARGVYLWYTHRFNDEFGMTKFPEEIGDWQVTKHRVILWQMFQAKAMVWDI";
        String right = "KARYTGNLQGMETDKVTLTCCSLDAAWILCLGDSRGRGDAFQTESIPPRVEMMLTMTYKMFMMCEWNSTNGTEMMMIVNHKHNMMRNDWMFNNWCHLVENWHWRMNMVYCRFNQGWPYRAMEHTWRFANTSGMIKTVRCEQPFDYDCKFFPCYANDHHQMDFYLCEQIPDSLCCLGVPEYANPSKVSMQQESVFFNCLIHIEMFDLSPNAKHNCNDYICCYIILTIGVDLTPFWYNLEDMPVAMSCTKIGLNERQINNWRLMTFMGSEFQNGWDFQTPSAPEEDRHALPEMEPIFVVYNDYHYYCLGAISKYWVIWDDVTFYLMHMENAWVELIESSYLVYWNENQTFDPWKTILINWNMYQSFIMSKRCVEHYKVMFMCWNSNLRIWEFMKDSFNWECRYMKTPNYNYALPERHTMKHPCDQACWRHCIFNIATIINNRTMAFYFPRGIYLAHCSCEGKARMSQPNHAFEIKNIKIVYQWVYAACQGKDWFGCAHRDRRANLTQMQQRGLWLSNNCRHRFYMKNLFFDMTEDAQPRYVDDTVHMLNIEVVDTKREFLPKVWKLFIRPMVYFLSVQEFLKFLLFHLKQIMFIITPWFVETQANRNHQENGNMVVADPMYQHKEDLIMFRRSITMWCRVTQKHSLCCFERPNAREMDLHSVTHQPQIGCHCHRLGKPPGKHQGYVNFHSFDECVPTQFRAVYLEFFRRRKMKTQIPGQCVWDRCHPYVQATYRTEFQWITKATMEQPFNPYKIMFRIWQITLPKRQFHSARGQYKATLQGWYTHRFNDEHCQVCEGIEQQMGETKLMFQAHWDWIVTKMHLTDTNCAKAEVWGI";

        int distance = GlobalAlignmentProblem.computeEditDistance(left, right);

        System.out.println(distance);
    }

    @Test
    public void overlapAlignmentTest() {
        final String left = "GCTATAAGAATAAACCACTAGATCACCTCCGGCTCGCTCACTCCTGATCATGGTTCGTGCTAACATCGCGCCGCGCTGACGCCGAATCGTTCGTAGGAGACAAGTCGACGACCTCATCTACAGGCAAAAGTTAAATTAGCTCTCGGCTAGATGTGACAATCGGAACCCTGCACCCTGCGTAATAGGGTAAATAGTCGGGAGTTGATGCACACACCTAGATATTGGCTGAATGACAGACTGCCATTCCTGCACTGGAAAGTAGAGTGCATATGTTTCGTGAGATTATGCAGGCTCTACGGTTATACTGGGCTCCACGGATTCGACCGGTACTGTTGATTGAAGACTCTTCTATAGAGGCTCTAACCGCGGAGGCCGCAACCAATCGACAATGAAGCACCCGTCGTCGGTATCGTTGGGAAGGACGACACCGTAAGGGCAGACTTTATCGTGACCCGTCTGCTTGCTAGAAAAGCCCTGGCGTTTGTACAACGTCCGTGCAGAATTAGCGTTTTTCTCAGGAAAGATGAGGGGGTTGATCATCATCTCGTTTCGCACGGGTCAAGCGCATTTTCCTACTGTTTTGGACACAGTACGTCTTCCACTGATCTCATACGGACATTACCAGCACCCTTTTGTACCTGTCGTAACTTGTGCCATTCTAGGCCCGTTTTCACTTGCGCTTATGATCATGGTTCCGCTGATCTATATGGGCCGGGTAGGGCACTCCCAGATGAAGGGGAGTAATGGTAGCCGGATCCAAGTGACGCGCCCTAGCGGCTCCGGAGTTTGATAGACGTCGTGCTATGGAGCGTTGGAGCGACAACGCGCTCGTGCTCTGGAAGGTCGCTGCTGATCCGTAA";
        final String right = "TACTGGTCCTGACCCACCTCACTTTGATGTCCCCTTTTCTCGTTTGCGCATCAAGATCTGGCCCGCAACTATTGGCCGTGAAAGGCACTCATCAATAAAGACAGTACTCACGCGGTCGGATCCAAATGCGCGCACCGAGCGGCCCAGGAGTTGATAGCGTCGAGTAACCTATTAGGACTCGAGGCAACTCGCGCTCTCTCAGGAGGCTCGCCTGCTAGTCCGTGAACGACGGATCTTTGGTGCTGCCTTCCTATCATGACATTGCCTAATAACGAGCGGCACCTACTCCCAGGTCTTTGAAGGGATGGCTTGTTTACCCCGATTCCGAGAAATAGAGATGACTCCTAAGGAAGTAATGAAGGAAGTTCAGTGGTATGGGTATCGTTTAGTTTGCCAGGGAGATTGCCCATAACCTAAGTCCCTAATACAGCAGTAGATCTCACCATAGATGTAGGAAAGCACAGTGATTTAGACGCTTAGCCAAATACAAAGGAATGTACCCCCTCCTAACACTGAGCACCGCTTATTTACTAGTATACTCAGAGTGTGGAGCGCTGAACGTTGTGTCAACAAGAACATAAGCCGCCGTGAATGAATTTGTGAAGGGGAGTGATCATGGTTTTACTCGTGGTAGATTTGGGCAGAACCTGATTCCTCACGTGTGAATGTAATTGAAGCTGACTCCCACACATACAGGCACGATTCTTTTAGATGATGTTTTAGGAAGCGCATTTCGTATTAACACTGCCTTGCATTTGATAACCATCACTTGTTCATTACATGATCCCATAGGGCCGTGTTGTTACTTTCGTGTTAGTCGAGCAGTATGACCACCTTTTCGGCGCTTGATATGCCTCAAGACGTGCGATTCAAGGAATCAAACAAATGAACGCCGCACTGGATGACTGGG";

        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.overlapAlignmentProblem(left, right);

        Assert.assertEquals(13, result.getScore());
        Assert.assertEquals("TACCTG-TCGTAACTTGTGC-CA-TTCT-AGG-CCCGTTTTCAC-TT-GCGCTT-ATGATCATGGTTCCGCTGATCTATATGGGCCGGGTAGGGCACTCC-CAGATGAAGGGGAGTAATG--GTAGCCGGATCCAAGTGACGCGC-CCTAGCGGCTCC-GGAGTTTGATAGACGTCGTG---C-TAT--GGAGCGTTGGAGCGACAAC--GCGCTCGTGCTCTGGAAGG-TCGC-TGCT-GATCCGT-AA", result.getLeft());
        Assert.assertEquals("TAC-TGGTCCTGACCCAC-CTCACTT-TGATGTCCCCTTTTCTCGTTTGCGCATCAAGATC-TGGC-CCGCA-A-CTAT-TGG-CCGTGAAAGGCACTCATCA-ATAAAGAC-AGTACTCACGCGGTCGGATCCAAATG-CGCGCACCGAGCGGC-CCAGGAGTT-GATAG-CGTCGAGTAACCTATTAGGA-C-TCG-AG-G-CAACTCGCGCTC-T-CTCAGGA-GGCTCGCCTGCTAG-TCCGTGAA", result.getRight());
    }

    @Test
    public void submissionOverlapAlignmentTest() {
        String left = "ATTGAATCGAGGGGGCATGATCGGACCGTAGGGAATCTCAGGCATCAGTACCTGGTACGACGGCCCCCCATGCGTCTATAGTAAGCACTTCAGTGCGCGGTAGCAGCGAACTTTCCACCCAGATCCGAATGTCTTCACAATTCGAACTGCCCGTGTGCTGCACTCTATCGTATTGTAAAGGAACAGAAACATCCTATCAGGAAGTCGCCTCAGGATCAGACACGCGCCGTCCAACAAGTGGTGGCAAGTGAGGACATTCTGCGCGGGTTCGAGGAACTTCCGTCTTATCCCGCACCGATTGTGCGTACGATCGTATAGGAACACCGGCGTACTTAACAAAAGTGCTTTAGACAGTGCCGTTACGCAGAGCCCCGATGTGGAATGCTCCCGGCACGTATAAGTCAATAGTGCAAGACCGCCGATACGCTCAGTGCTGGCACGAGCTTGCTCCAGACAACGGTAATGTTCGCCGTGTCCGTTACCGCGGTCCTTTAAAGTTAGCTTCACGGACCTGCTACACCCGCGATAGTCACAAAGAAGTCTACGCTTACTCCCCGCCAATCATTTACCGAATATACCCTCTTTCACGTTAGATCTTTGCGCGGACGCCTCGGCCCATTGGTTCAAAGAGGCTGATCCTGTCCATCTCTAATCTGTGAGGTACTGCTACCTAGCAGACTAAAGGCTGATGTGTTTGCCAGTGCGTCTTCGTGGCCCATAAGATCAGTACGTCCATCAGAGAGAGAGACTCTTAGTACAGTTCCTGTAGCGGAGTTGTTCGACCGTTTGCTATTTGCTCACGCTCAGGATCGTTATAGGGGAGGTCTCCTGGGGAATCACCCAGCAGT";
        String right = "CTGGGGTTTTGTGTTGATGCCATGCCATGGTGCTAAATAAGGCTGATCCACTGTCTTTCTTGCCTGTGGGGCACTGTACCGTAGCGATAAAGGATGATGATTTCCCTAGTAGGTCTATGGTGGTGCTACAGGGTTAGTACGTTCATCCAAGAGAAAAGACTCTTAAGTCCGAGTCCTGTGACGGAGTATTCGATGTTTGCAATTGCTCACGCTCAGGGTCACATGGGACAGGTCATCCCTGAGTACTCGCCCGAGTTTTGGAAGTAAAAGATTACTCATATCCTGCGGACTTCACACCGTCTGGCATTAACCAAGGCCTGATACACAAGCACACTGCTTCTCAAGTTGTCCTGAATACATTTGCGCAGTCTAAGCCCAGAATCATTGGTGGCGTGTTATGTGCCGAGGCTCAATGTAGGGCGGTCTAATCGAAAAATGCCCAGATGAAGCGCCACTAAGTCCACGAAACAGCAGATAGGAGTTAGCCCGTCTGGTACGCTTTTGCCAAGTTTTTCGCTCGTAAAACCCCCCAATAGCCAGGGTTGGCTCAGCAGAGCCATCCACTCCGCGAGCTCGCCAGAGAACCTCTAAAACATAATACAGCGTCAAAGCCGGATGTAAGACATGTGAACTTTGTCCACGTACTGCTCGCGGGCGAGGCGTTTGGGTCGTCTAAGAGTTAACGTAGAACAGCCAGCATCGTCTTTCTTCGTTCAAGACGCGGTTACCCTTTAATCCGGGCTCTTTCGACTCGCCTTTACCCTACTTAGAGGATATGGTTCCAACACCGACGGGGAGAAATCCCCCGTGCATACACACTAAGGATTTCAGGTCTCTGCCATCGAACGCCCCTAAATCGTTTGGTATCGAAA";

        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.overlapAlignmentProblem(left, right);

        System.out.println(result.getScore());
        System.out.println(result.getLeft());
        System.out.println(result.getRight());
    }

    @DataProvider(name = "fittingAlignmentProblem")
    public Object[][] fittingAlignmentProblemDataSource() {
        return new Object[][]{
                {"GTAGGCTTAAGGTTA", "TAGATA", 2},
                {"CAATCACCCCAATCCCTCAATCCTGGCCCCACGCATAGGCTAATGCCAATCGCGGCCAGGGTATAACCGCCATAACTGTGGGTCAGAAGGGATAAGTTCCACAATCCTATTTTCCTCGAGGCGCTTCGATGCGTTAACGCGTACACTCTGTCGGCCAACCGTGTGGGAGCCGAATTGGCTGGGCTGTTGAACATTCTATCAGTAGATAAACGAAGGTACATCCGAGGTTGTCGATCGACCGCGGGGTCGTAGCGCGTGCATGTTCCTTTCAGGCCCACATACTCCGGAACGGTTCATATCACGACTATTCTTGCACAATCGGACAACGGTGTACCATGGTGGACACCGTAGGAGACCAATACTGCGTAAATCATAAGCATTGGAGAGTGGACTGCTAGCGAGGCTCACCATGGAGTCTCGGTCGGCATCTCCTGACTGCTGTTCCATCGCGTTTTTCTTTTACTCACGCAATAAATCAATACCCCCTAACACAGGCCTGCTCCAGCCTTATTAAGGCCATAGTAGCTCTACATGTAGACCGAACGGAAGCACAGTTTGGTAGAAATTCTTAATCGACTATGGTCCGTGCAGGCCAAAAAAGGAATAATCTTCGAATTCTCACGCCTTCATTAGGGCGCACATGGTGGGGTAAATCACTGCACTCTGTTCGCAGTTAAGCGTTGCAATCAATATCGGCAGAACTCGGAGTCCGTATAAAGCCGCCTCAGCGTGCACACGCCCGTGCGGCACGTCATTAGACGAGGATTCCGGGGGACTGGCCTGTTCGTAATCCACTAAAACAATGGTCCTACCATCTAAAACGCACCGTGTTCCCCTCTACGGGAACCCCCTAGAT",
                        "AGAGCGCAGAGAAGTCATTAGAACATGTAGCACATCGCTTATTAAGGGTCAATACCTAAAGGGCCTAACTATACGCCACACGGAACAGCTC", 22}
        };
    }

    @Test(dataProvider = "fittingAlignmentProblem")
    public void fittingAlignmentProblemTest(String left, String right, int expectedDistance) throws IOException {
        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.fittingAlignmentProblem(left, right);

        Assert.assertEquals(expectedDistance, result.getScore());
    }

    @Test
    public void submissionFittingAlignmentProblemTest() {
        String left = "TTCCCAGAGAGGTGATTACCGGTGGAAGGCTTCAACCCAAGTGGAGTCTATCGTGAACGTATCTATGTGCAGCCTTCACACTTCTAATAACTACTGACGCTAAATAAATCCTATGTGTTCAAACATGTTCGGGTTGCACTCGACCCTTGGAAAGAATGCTTCCCAGCTCGTATACAAACGACCTGGCGCTATAACGTGACACAGTCCAACTACTCTTAAAGTCTCCACCCAACATCTCGCGCTAAACGATATGGGTTGGTGTCTTAGCTCGCAACACTTCCTTGGCACCTTTGCGAACTAGCCGTTACGAACTACAGAGCTCGCGAAAGCGTACGGGGACGCATCGGTGTCGACTCCCCGACACTCATGGGACGCCAGACGTTTCGTATCCCGGTCGCAGATCCGTTTCAGCCTCGCTTGAGTACGGGGGGGCGGGTATGCTCCTTACACACTGAGTGTCGCTTAGTTCTGACACGAATTGATCATAACGCACGGCGTCTGAGAAGGGATATTCCTTATTTGTCAGGCCTTCTACCCAGCCATAGTAACGGGCCTGTAATACGAGGTTGACACTAAACTTCAAGGGACTACCCAACTGCTTCCCCCGACTGACAACACCGTATGTAAGAGGGAAACCCCCGGAGCATGTGTTTCCAATCAAAAACGACCTTGCTTAACGCTTGTCAATATCCTCGGTAAGATACTGTTCTGACGCCTCGCTACACCACGATTTGCAGACGCGAACAGCAACGCTGGTGGGATTGGCGTCTATCTGGCGGGAGTTATGGCTCCGGCCAGCCGGTAAATGAGCGAACAACTGAGGATGCCTAAAGTTGAACGCGTCAAGACAAAATCTTCGCCGGCGATCATTATCGGCACAGAAGTTACAAGTGGAAGGCACGCCGACTCGTCCAGCGGAGTGAG";
        String right = "TGAGAGAGAGTAATCACATATGTTTTGAACACCGAAACACAAAGAAATGTAAAGCCGGCACGTTTGTGCCTTAGATACGTAAACGAGTT";
        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.fittingAlignmentProblem(left, right);

        System.out.println(result.getScore());
        System.out.println(result.getLeft());
        System.out.println(result.getRight());
    }

    @Test(dataProvider = "longestCommonSequenceBackTrackTest")
    public void longestCommonSequenceBackTrackTest(String left, String right, String expectedLeftAlignment, String expectedRightAlignment, int expectedScore) throws IOException {
        ScoringMatrix scoringMatrix = ScoringMatrix.load("com/github/pmateusz/bioinformatics/comparing/blosum62.txt");

        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.compareGlobal(left, right, scoringMatrix, INDEL_PENALTY);
        Assert.assertEquals(expectedScore, result.getScore());
        Assert.assertEquals(expectedLeftAlignment, result.getLeft());
        Assert.assertEquals(expectedRightAlignment, result.getRight());
    }

    @Test
    public void submissionLongestCommonSequenceBackTrackTest() throws IOException {
        String left = "CYISMPDSRYQCCQFSIDGKDVFVFGDHAHGNHWNFDEHKGENNNKQGTEHRIACPTRIISHDPPSEALACQWLPSMHIHCELPKRGKLARIIMRKEGAFNFHCWDHVASRRRKTWHRHEWDVKSNKLKDIMLHIRNGPNSQPDDHTHSTGAHGCAFPVKCLSWAWSGNNYQFFDDWMRLNNPHEWILLHYKLNELQQHKIWFLKDSHWMWTSRCHQGFIPNQLVIQFLTIKTCIWDNGELGDTCENQEDLTKLQQYMSPIHDPCNTSMTSVTQALPYFPNDSASTNREVIWRPRCKTTCTGFTVRHNWLVFEGPTVQHMVLDLCCTHPGSTHSRKKRVIAHIYVVKTYWGIDNQQLDFENVPPKWTLISIVKPKLKASQVHAYYMLIILKDWSKDGHRRGLQYEEQQSGNCLDLGYKMAIYHWPYMTLIQTYNYHHAQVIVRDKGRSSGKISCAWVKFWYEDEQFCFQGSVIPWNVYSLTPPSYCYWNIENNWMEESWLMWRSCQSGSKKHEESWQMVEPKEGYPVESPCTKCPVSEMTQPQGFCDRLFEIWAKSEWTHAKWSAFPCFSWHFWCSRFMAKMMREFFYGVIRINNAETCDNYSAYKWSFSEINRYMMPLVGHDELKGNNVYWGTGYMFLCNLTEKTYIIWTNPWDANDNEVIEVQLCGGEMCQAMDAIPNLYFWMMHQIWNYISQWPWFKPCCTAGTPIIDRQQATMMNPVWAMNEMVTFYERKVWAANAQYFFYDISRKCIDRLDRFQWSPMMLPYNYTIMNMLALPGRENFLAKISQMVWMKIGPAYMFKEHSTFVESFLIAEWVLD";
        String right = "CYISPPDSCQNSIDMFWKSIWVANFVFGDHAHGNHWNFDGENNNKQGHRIACPTRIISHDPPSEALACWLPSHHIHCERIIMRKEGVDWQQQVEFNRHCWDHVADTHRGDCTCHEWQLRGPMIVHIFLSNILKDIMLASWALLALGIRNDVQCSQPDDHLPSTGAHTCCFPVKCLSWWSGNNYQFADFLMWMRLNNPTAKSYEWIGLHNELQQHKIWFLKDSHWMWTSRCHQGFIPFCTENKTDARRVKLYWICHRDEFLTINPELGDTAENQSRIHLRLDLTSLQSYMSPIAWHRASESKDPCNTSMTSVTWALPYFINDSASTNREVEWRPACKTTIRNDTCHEWLVFCGPTVQHMVLVLACTHPGSTTNINHEDKSRGKRVIAHIYVRLTEHVNYCNQQLDFRCVPSKWTLISLFMKGHVHAIYMLIILKDWSKDGHRRGHAPSIQQQCGNCLDNLIYYWRYTAGYKMADNPGKTYMYTDMMSRVGPIIYRHCRCQTYNNMNRIHPHHAQCIVRDKWRGSVKISCEQFCFQGSWNVLLQRPNFRSYCYWSIELSMGGQEANWLRAMWSCLHVHKCTVTSEYCVSWQMFLVARVESPCTKEVMQPVSEMTQPRRQKAYGFCDIDLEIWAKSEWTHAKWSAHFWCSRFMAKMMREFFYGVIRINNAETCDNYSAYKWSFSAINRYMMVGHDEKKGNNVYWGLTEKTYIIWGNVIEVQVAGEIEQAMDAIPNLYFWWNYIGWWPWFKPCCTDGTTMKIIDRQQATMITFYERHVWAAEAQYAFYTVVIDRKCIDRLDRFQWSPMMVWLPSNMNMLALPSQMVWMKIGPAYWKADTIFKEHSTFNESDPVESFWIAEWVLD";
        ScoringMatrix scoringMatrix = ScoringMatrix.load("com/github/pmateusz/bioinformatics/comparing/blosum62.txt");

        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.compareGlobal(left, right, scoringMatrix, INDEL_PENALTY);

        System.out.println(result.getScore());
        System.out.println(result.getLeft());
        System.out.println(result.getRight());
    }

    @Test
    public void quiz() {
        // 1
        final int first = cost("TCGAC--ATT", "CC---GAA-T", 1, -1, -2);

        // 2
        final int second = cost("ACAGTAGACAC", "ATAC-AGATAC", 1, -3, -1);

        // 3
        GlobalAlignmentProblem.Result result = GlobalAlignmentProblem.fittingAlignmentProblem("GTTGGATTACGAATCGATATCTGTTTG", "ACGTCG");

        // 4
        final int four = cost("CTAGTACTACTTGAC", "CTA-TAGT-CTTAAC", 1, 0, -2);
    }

    private int cost(String left, String right, int match, int mismatch, int indel) {
        int score = 0;

        int size = Math.min(left.length(), right.length());
        for (int i = 0; i < size; ++i) {
            if (right.charAt(i) == '-') {
                score += indel;
            } else if (right.charAt(i) == left.charAt(i)) {
                score += match;
            } else {
                score += mismatch;
            }
        }
        return score;
    }
}
